// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	domain0 "github.com/mocoarow/cocotola-1.24/cocotola-auth/domain"
	"github.com/mocoarow/cocotola-1.24/moonbeam/user/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthenticationUsecase creates a new instance of MockAuthenticationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticationUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticationUsecase {
	mock := &MockAuthenticationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthenticationUsecase is an autogenerated mock type for the AuthenticationUsecase type
type MockAuthenticationUsecase struct {
	mock.Mock
}

type MockAuthenticationUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticationUsecase) EXPECT() *MockAuthenticationUsecase_Expecter {
	return &MockAuthenticationUsecase_Expecter{mock: &_m.Mock}
}

// GetUserInfo provides a mock function for the type MockAuthenticationUsecase
func (_mock *MockAuthenticationUsecase) GetUserInfo(ctx context.Context, bearerToken string) (*domain.AppUserModel, error) {
	ret := _mock.Called(ctx, bearerToken)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *domain.AppUserModel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.AppUserModel, error)); ok {
		return returnFunc(ctx, bearerToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.AppUserModel); ok {
		r0 = returnFunc(ctx, bearerToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AppUserModel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, bearerToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthenticationUsecase_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type MockAuthenticationUsecase_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
//   - ctx
//   - bearerToken
func (_e *MockAuthenticationUsecase_Expecter) GetUserInfo(ctx interface{}, bearerToken interface{}) *MockAuthenticationUsecase_GetUserInfo_Call {
	return &MockAuthenticationUsecase_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo", ctx, bearerToken)}
}

func (_c *MockAuthenticationUsecase_GetUserInfo_Call) Run(run func(ctx context.Context, bearerToken string)) *MockAuthenticationUsecase_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthenticationUsecase_GetUserInfo_Call) Return(appUserModel *domain.AppUserModel, err error) *MockAuthenticationUsecase_GetUserInfo_Call {
	_c.Call.Return(appUserModel, err)
	return _c
}

func (_c *MockAuthenticationUsecase_GetUserInfo_Call) RunAndReturn(run func(ctx context.Context, bearerToken string) (*domain.AppUserModel, error)) *MockAuthenticationUsecase_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function for the type MockAuthenticationUsecase
func (_mock *MockAuthenticationUsecase) RefreshToken(ctx context.Context, refreshToken string) (string, error) {
	ret := _mock.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, refreshToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthenticationUsecase_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type MockAuthenticationUsecase_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx
//   - refreshToken
func (_e *MockAuthenticationUsecase_Expecter) RefreshToken(ctx interface{}, refreshToken interface{}) *MockAuthenticationUsecase_RefreshToken_Call {
	return &MockAuthenticationUsecase_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, refreshToken)}
}

func (_c *MockAuthenticationUsecase_RefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *MockAuthenticationUsecase_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthenticationUsecase_RefreshToken_Call) Return(s string, err error) *MockAuthenticationUsecase_RefreshToken_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockAuthenticationUsecase_RefreshToken_Call) RunAndReturn(run func(ctx context.Context, refreshToken string) (string, error)) *MockAuthenticationUsecase_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// SignInWithIDToken provides a mock function for the type MockAuthenticationUsecase
func (_mock *MockAuthenticationUsecase) SignInWithIDToken(ctx context.Context, idToken string) (*domain0.AuthTokenSet, error) {
	ret := _mock.Called(ctx, idToken)

	if len(ret) == 0 {
		panic("no return value specified for SignInWithIDToken")
	}

	var r0 *domain0.AuthTokenSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain0.AuthTokenSet, error)); ok {
		return returnFunc(ctx, idToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain0.AuthTokenSet); ok {
		r0 = returnFunc(ctx, idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain0.AuthTokenSet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, idToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthenticationUsecase_SignInWithIDToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignInWithIDToken'
type MockAuthenticationUsecase_SignInWithIDToken_Call struct {
	*mock.Call
}

// SignInWithIDToken is a helper method to define mock.On call
//   - ctx
//   - idToken
func (_e *MockAuthenticationUsecase_Expecter) SignInWithIDToken(ctx interface{}, idToken interface{}) *MockAuthenticationUsecase_SignInWithIDToken_Call {
	return &MockAuthenticationUsecase_SignInWithIDToken_Call{Call: _e.mock.On("SignInWithIDToken", ctx, idToken)}
}

func (_c *MockAuthenticationUsecase_SignInWithIDToken_Call) Run(run func(ctx context.Context, idToken string)) *MockAuthenticationUsecase_SignInWithIDToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthenticationUsecase_SignInWithIDToken_Call) Return(authTokenSet *domain0.AuthTokenSet, err error) *MockAuthenticationUsecase_SignInWithIDToken_Call {
	_c.Call.Return(authTokenSet, err)
	return _c
}

func (_c *MockAuthenticationUsecase_SignInWithIDToken_Call) RunAndReturn(run func(ctx context.Context, idToken string) (*domain0.AuthTokenSet, error)) *MockAuthenticationUsecase_SignInWithIDToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGoogleUserUsecase creates a new instance of MockGoogleUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGoogleUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGoogleUserUsecase {
	mock := &MockGoogleUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGoogleUserUsecase is an autogenerated mock type for the GoogleUserUsecase type
type MockGoogleUserUsecase struct {
	mock.Mock
}

type MockGoogleUserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoogleUserUsecase) EXPECT() *MockGoogleUserUsecase_Expecter {
	return &MockGoogleUserUsecase_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function for the type MockGoogleUserUsecase
func (_mock *MockGoogleUserUsecase) Authorize(ctx context.Context, state string, code string, organizationName string) (*domain0.AuthTokenSet, error) {
	ret := _mock.Called(ctx, state, code, organizationName)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 *domain0.AuthTokenSet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (*domain0.AuthTokenSet, error)); ok {
		return returnFunc(ctx, state, code, organizationName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) *domain0.AuthTokenSet); ok {
		r0 = returnFunc(ctx, state, code, organizationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain0.AuthTokenSet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, state, code, organizationName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGoogleUserUsecase_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type MockGoogleUserUsecase_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx
//   - state
//   - code
//   - organizationName
func (_e *MockGoogleUserUsecase_Expecter) Authorize(ctx interface{}, state interface{}, code interface{}, organizationName interface{}) *MockGoogleUserUsecase_Authorize_Call {
	return &MockGoogleUserUsecase_Authorize_Call{Call: _e.mock.On("Authorize", ctx, state, code, organizationName)}
}

func (_c *MockGoogleUserUsecase_Authorize_Call) Run(run func(ctx context.Context, state string, code string, organizationName string)) *MockGoogleUserUsecase_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGoogleUserUsecase_Authorize_Call) Return(authTokenSet *domain0.AuthTokenSet, err error) *MockGoogleUserUsecase_Authorize_Call {
	_c.Call.Return(authTokenSet, err)
	return _c
}

func (_c *MockGoogleUserUsecase_Authorize_Call) RunAndReturn(run func(ctx context.Context, state string, code string, organizationName string) (*domain0.AuthTokenSet, error)) *MockGoogleUserUsecase_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateState provides a mock function for the type MockGoogleUserUsecase
func (_mock *MockGoogleUserUsecase) GenerateState(context1 context.Context) (string, error) {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for GenerateState")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(context1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(context1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGoogleUserUsecase_GenerateState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateState'
type MockGoogleUserUsecase_GenerateState_Call struct {
	*mock.Call
}

// GenerateState is a helper method to define mock.On call
//   - context1
func (_e *MockGoogleUserUsecase_Expecter) GenerateState(context1 interface{}) *MockGoogleUserUsecase_GenerateState_Call {
	return &MockGoogleUserUsecase_GenerateState_Call{Call: _e.mock.On("GenerateState", context1)}
}

func (_c *MockGoogleUserUsecase_GenerateState_Call) Run(run func(context1 context.Context)) *MockGoogleUserUsecase_GenerateState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGoogleUserUsecase_GenerateState_Call) Return(s string, err error) *MockGoogleUserUsecase_GenerateState_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockGoogleUserUsecase_GenerateState_Call) RunAndReturn(run func(context1 context.Context) (string, error)) *MockGoogleUserUsecase_GenerateState_Call {
	_c.Call.Return(run)
	return _c
}
