// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/mocoarow/cocotola-1.24/cocotola-auth/service"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFirebaseClient creates a new instance of MockFirebaseClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFirebaseClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFirebaseClient {
	mock := &MockFirebaseClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFirebaseClient is an autogenerated mock type for the FirebaseClient type
type MockFirebaseClient struct {
	mock.Mock
}

type MockFirebaseClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFirebaseClient) EXPECT() *MockFirebaseClient_Expecter {
	return &MockFirebaseClient_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function for the type MockFirebaseClient
func (_mock *MockFirebaseClient) GetUser(ctx context.Context, uid string) (*service.UserRecord, error) {
	ret := _mock.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *service.UserRecord
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*service.UserRecord, error)); ok {
		return returnFunc(ctx, uid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *service.UserRecord); ok {
		r0 = returnFunc(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.UserRecord)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFirebaseClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockFirebaseClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx
//   - uid
func (_e *MockFirebaseClient_Expecter) GetUser(ctx interface{}, uid interface{}) *MockFirebaseClient_GetUser_Call {
	return &MockFirebaseClient_GetUser_Call{Call: _e.mock.On("GetUser", ctx, uid)}
}

func (_c *MockFirebaseClient_GetUser_Call) Run(run func(ctx context.Context, uid string)) *MockFirebaseClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFirebaseClient_GetUser_Call) Return(userRecord *service.UserRecord, err error) *MockFirebaseClient_GetUser_Call {
	_c.Call.Return(userRecord, err)
	return _c
}

func (_c *MockFirebaseClient_GetUser_Call) RunAndReturn(run func(ctx context.Context, uid string) (*service.UserRecord, error)) *MockFirebaseClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyIDToken provides a mock function for the type MockFirebaseClient
func (_mock *MockFirebaseClient) VerifyIDToken(ctx context.Context, idToken string) (*service.Token, error) {
	ret := _mock.Called(ctx, idToken)

	if len(ret) == 0 {
		panic("no return value specified for VerifyIDToken")
	}

	var r0 *service.Token
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*service.Token, error)); ok {
		return returnFunc(ctx, idToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *service.Token); ok {
		r0 = returnFunc(ctx, idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Token)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, idToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFirebaseClient_VerifyIDToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyIDToken'
type MockFirebaseClient_VerifyIDToken_Call struct {
	*mock.Call
}

// VerifyIDToken is a helper method to define mock.On call
//   - ctx
//   - idToken
func (_e *MockFirebaseClient_Expecter) VerifyIDToken(ctx interface{}, idToken interface{}) *MockFirebaseClient_VerifyIDToken_Call {
	return &MockFirebaseClient_VerifyIDToken_Call{Call: _e.mock.On("VerifyIDToken", ctx, idToken)}
}

func (_c *MockFirebaseClient_VerifyIDToken_Call) Run(run func(ctx context.Context, idToken string)) *MockFirebaseClient_VerifyIDToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFirebaseClient_VerifyIDToken_Call) Return(token *service.Token, err error) *MockFirebaseClient_VerifyIDToken_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *MockFirebaseClient_VerifyIDToken_Call) RunAndReturn(run func(ctx context.Context, idToken string) (*service.Token, error)) *MockFirebaseClient_VerifyIDToken_Call {
	_c.Call.Return(run)
	return _c
}
