package service

import (
	"context"

	mbliberrors "github.com/mocoarow/cocotola-1.24/moonbeam/lib/errors"
	mbuserdomain "github.com/mocoarow/cocotola-1.24/moonbeam/user/domain"
	mbuserservice "github.com/mocoarow/cocotola-1.24/moonbeam/user/service"

	libdomain "github.com/mocoarow/cocotola-1.24/lib/domain"
)

type organizationAction struct {
	rf               RepositoryFactory
	rsrf             mbuserservice.RepositoryFactory
	OrganizationRepo mbuserservice.OrganizationRepository
	AppUserRepo      mbuserservice.AppUserRepository
	Organization     *mbuserservice.Organization
	systemAdmin      *mbuserservice.SystemAdmin
	SystemOwner      *mbuserservice.SystemOwner
}

type OrganizationActionOption func(context.Context, *organizationAction) error

func (a *organizationAction) initRsrf(ctx context.Context) error {
	if a.rsrf != nil {
		return nil
	}

	rsrf, err := a.rf.NewMoonBeamRepositoryFactory(ctx)
	if err != nil {
		return err
	}
	a.rsrf = rsrf
	return nil
}

func (a *organizationAction) initSystemAdmin(ctx context.Context) error {
	if a.SystemAdmin != nil {
		return nil
	}
	if err := a.initRsrf(ctx); err != nil {
		return err
	}

	systemAdmin, err := mbuserservice.NewSystemAdmin(ctx, a.rsrf)
	if err != nil {
		return err
	}
	a.SystemAdmin = systemAdmin
	return nil
}

func (a *organizationAction) initSystemOwnerByOrganizationID(ctx context.Context, organizationID *mbuserdomain.OrganizationID) error {
	if a.SystemOwner != nil {
		return nil
	}

	if err := a.initSystemAdmin(ctx); err != nil {
		return err
	}
	systemOwner, err := a.SystemAdmin.FindSystemOwnerByOrganizationID(ctx, organizationID)
	if err != nil {
		return mbliberrors.Errorf("find system owner by organization id(%d): %w", organizationID.Int(), err)
	}
	a.SystemOwner = systemOwner
	return nil
}
func (a *organizationAction) initSystemOwnerByOrganizationName(ctx context.Context, organizationName string) error {
	if a.SystemOwner != nil {
		return nil
	}

	if err := a.initSystemAdmin(ctx); err != nil {
		return err
	}
	systemOwner, err := a.SystemAdmin.FindSystemOwnerByOrganizationName(ctx, organizationName)
	if err != nil {
		return mbliberrors.Errorf("find system owner by organization name %s: %w", organizationName, err)
	}
	a.SystemOwner = systemOwner
	return nil
}

func (a *organizationAction) initOrganizationByOrganizationID(ctx context.Context, organizationID *mbuserdomain.OrganizationID) error {
	if a.Organization != nil {
		return nil
	}

	if err := a.initSystemAdmin(ctx); err != nil {
		return err
	}

	organization, err := a.SystemAdmin.FindOrganizationByID(ctx, organizationID)
	if err != nil {
		return mbliberrors.Errorf("find organization by id(%d): %w", organizationID.Int(), err)
	}
	a.Organization = organization
	return nil
}

func (a *organizationAction) initOrganizationByOrganizationName(ctx context.Context, organizationName string) error {
	if a.Organization != nil {
		return nil
	}

	if err := a.initSystemAdmin(ctx); err != nil {
		return err
	}

	organization, err := a.SystemAdmin.FindOrganizationByName(ctx, organizationName)
	if err != nil {
		return mbliberrors.Errorf("find organization by name %s: %w", organizationName, err)
	}
	a.Organization = organization
	return nil
}

func WithSystemAdmin() OrganizationActionOption {
	return func(ctx context.Context, action *organizationAction) error {
		if err := action.initSystemAdmin(ctx); err != nil {
			return err
		}
		return nil
	}
}

func WithOrganizationRepository() OrganizationActionOption {
	return func(ctx context.Context, action *organizationAction) error {
		if err := action.initRsrf(ctx); err != nil {
			return err
		}
		action.OrganizationRepo = action.rsrf.NewOrganizationRepository(ctx)
		return nil
	}
}

func WithAppUserRepository() OrganizationActionOption {
	return func(ctx context.Context, action *organizationAction) error {
		if err := action.initRsrf(ctx); err != nil {
			return err
		}
		action.AppUserRepo = action.rsrf.NewAppUserRepository(ctx)
		return nil
	}
}

func NewOrganizationAction(ctx context.Context, systemToken libdomain.SystemToken, rf RepositoryFactory, options ...OrganizationActionOption) (*organizationAction, error) {
	action := organizationAction{}
	action.rf = rf
	for _, option := range options {
		if err := option(ctx, &action); err != nil {
			return nil, err
		}
	}
	return &action, nil
}
