// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	api "github.com/mocoarow/cocotola-1.24/lib/api"

	mock "github.com/stretchr/testify/mock"
)

// CocotolaAuthClient is an autogenerated mock type for the CocotolaAuthClient type
type CocotolaAuthClient struct {
	mock.Mock
}

type CocotolaAuthClient_Expecter struct {
	mock *mock.Mock
}

func (_m *CocotolaAuthClient) EXPECT() *CocotolaAuthClient_Expecter {
	return &CocotolaAuthClient_Expecter{mock: &_m.Mock}
}

// RetrieveUserInfo provides a mock function with given fields: ctx, bearerToken
func (_m *CocotolaAuthClient) RetrieveUserInfo(ctx context.Context, bearerToken string) (*api.AppUserInfoResponse, error) {
	ret := _m.Called(ctx, bearerToken)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveUserInfo")
	}

	var r0 *api.AppUserInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*api.AppUserInfoResponse, error)); ok {
		return rf(ctx, bearerToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *api.AppUserInfoResponse); ok {
		r0 = rf(ctx, bearerToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.AppUserInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bearerToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CocotolaAuthClient_RetrieveUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveUserInfo'
type CocotolaAuthClient_RetrieveUserInfo_Call struct {
	*mock.Call
}

// RetrieveUserInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - bearerToken string
func (_e *CocotolaAuthClient_Expecter) RetrieveUserInfo(ctx interface{}, bearerToken interface{}) *CocotolaAuthClient_RetrieveUserInfo_Call {
	return &CocotolaAuthClient_RetrieveUserInfo_Call{Call: _e.mock.On("RetrieveUserInfo", ctx, bearerToken)}
}

func (_c *CocotolaAuthClient_RetrieveUserInfo_Call) Run(run func(ctx context.Context, bearerToken string)) *CocotolaAuthClient_RetrieveUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CocotolaAuthClient_RetrieveUserInfo_Call) Return(_a0 *api.AppUserInfoResponse, _a1 error) *CocotolaAuthClient_RetrieveUserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CocotolaAuthClient_RetrieveUserInfo_Call) RunAndReturn(run func(context.Context, string) (*api.AppUserInfoResponse, error)) *CocotolaAuthClient_RetrieveUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewCocotolaAuthClient creates a new instance of CocotolaAuthClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCocotolaAuthClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *CocotolaAuthClient {
	mock := &CocotolaAuthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
